map "http://worldhealthorganization.github.io/smart-ot/StructureMap/MeaslesLogicalModelToResources" = "MeaslesLogicalModelToResources"
uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeasles" alias MeaslesLogicalModel as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias MeaslesCIFBundle as target

group MeaslesLogicalModelToResources(source lm : MeaslesLogicalModel, target bundle : MeaslesCIFBundle) {
  lm -> bundle.type = 'document' "setbundletype";
  lm -> uuid() as bid, bundle.id = bid "setid";
  lm -> uuid() as cid, uuid() as pid then { 
    lm -> bundle.entry as entry,  entry.fullUrl = append('urn:uuid:', cid), create('http://worldhealthorganization.github.io/smart-ot/StructureDefinition/MeaslesCIFComposition') as composition then {
      lm then LmToComposition(lm, composition, cid, pid) "createcomposition";
      lm -> entry.resource = composition "setcompositionAsEntry";
      } "mapCompositionResource";
    lm -> bundle.entry as entry, entry.fullUrl = append('urn:uuid:', pid), create('http://worldhealthorganization.github.io/smart-ot/StructureDefinition/MeaslesPatient') as patient then {
    lm.Demographics as demographics -> demographics then DemographicsToPatient(demographics, patient, pid) "createPatient";
    lm -> entry.resource = patient "setPatientAsEntry";
    } "mapPatientResource";
} "setEntries" ;
}


group LmToComposition(source lm : MeaslesLogicalModel, target composition : MeaslesCIFComposition, source cid, source pid) {
  cid -> composition.id = cid "setId2";
  lm -> composition.subject as subject then {
    lm -> subject.reference= append('Patient/',pid) "setSubject2";
  } "do";
}


group DemographicsToPatient(source demographics:DemographicsLogicalModel , target patient: MeaslesPatient, source pid) {
 pid -> patient.id = pid "setId3";
 demographics.Name as name -> patient.name = name "setName2";
 demographics.DateOfBirth as dob -> patient.birthDate = dob "setDateOfBirth";
 demographics.Sex as sex -> patient.gender = sex "setSex";
 demographics.CountryOfBirth as cob -> patient.CountryOfBirth = cob "setCountryOfBirth";
 demographics.Landmark as landmark -> patient.extension as ext then {
  landmark -> ext.url = 'http://worldhealthorganization.github.io/smart-ot/StructureDefinition/Landmark' , ext.value = landmark "setLandmarkValue";
 } "setLandmark";
 demographics.Guardian as guardian -> patient.extension as ext then {
  guardian -> ext.url = 'http://worldhealthorganization.github.io/smart-ot/StructureDefinition/Guardian' , ext.value = guardian "setGuardianValue";
 } "setGuardian";
 demographics.Telephone as phone -> patient.telecom = phone "setTelephone";
 demographics.PlaceOfResidence as address -> patient.address = address "setAddress";
 demographics.Occupation as occupation -> patient.extension as ext then {
  occupation -> ext.url ='http://worldhealthorganization.github.io/smart-ot/StructureDefinition/Occupation', ext.value = occupation "setOccupationValue";
 } "setOccupation";
 demographics.WorkAddress as workAddress -> patient.extension as ext then {
 workAddress -> ext.url = 'http://worldhealthorganization.github.io/smart-ot/StructureDefinition/WorkAddress', ext.value = workAddress "setWorkAddressValue";
 } "setWorkAddress";
}